#!/usr/bin/env node

// Carregar vari√°veis de ambiente
require('dotenv').config({ path: '.env.local' });

const { GoogleGenerativeAI } = require('@google/generative-ai');

const API_KEY = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;

async function testAIResponse() {
  console.log('üß™ Testando resposta da IA...\n');
  
  try {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
    
    const prompt = `
Voc√™ √© um assistente especializado em an√°lise de contratos p√∫blicos da CODEMAR. 
Analise os dados de contratos fornecidos e responda √† consulta do usu√°rio de forma precisa e √∫til.

DADOS DOS CONTRATOS:
ID: 1
Nome: Contrato de Fornecimento de Material de Escrit√≥rio
Descri√ß√£o: Fornecimento de material de escrit√≥rio para todas as diretorias
Valor: R$ 150.000
Per√≠odo: 2024-01-01 a 2024-12-31
Fornecedor: Papelaria Central Ltda
Diretoria: Administrativa
Status: Ativo
Tipo: Fornecimento
---

CONSULTA DO USU√ÅRIO: "Quais s√£o os maiores contratos por valor?"

INSTRU√á√ïES:
1. Analise os dados de contratos fornecidos
2. Responda √† consulta de forma clara e precisa
3. Forne√ßa informa√ß√µes espec√≠ficas quando poss√≠vel (valores, datas, fornecedores)
4. Se n√£o encontrar informa√ß√µes exatas, indique isso claramente
5. Sugira consultas relacionadas que podem ser √∫teis
6. Avalie sua confian√ßa na resposta (0-100%)

FORMATO DA RESPOSTA (JSON):
{
  "answer": "Resposta detalhada √† consulta",
  "suggestions": ["Sugest√£o 1", "Sugest√£o 2", "Sugest√£o 3"],
  "confidence": 85,
  "sources": ["ID do contrato relevante 1", "ID do contrato relevante 2"]
}

IMPORTANTE: Responda APENAS com o JSON v√°lido, sem markdown, sem \`\`\`json, sem texto adicional. Apenas o objeto JSON puro.
`;

    console.log('üì§ Enviando prompt...');
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('üì• Resposta bruta:', text);
    console.log('\nüîß Processando resposta...');
    
    // Limpar o texto da resposta (remover markdown se presente)
    let cleanText = text.trim();
    
    // Remover markdown code blocks se presente
    if (cleanText.startsWith('```json')) {
      cleanText = cleanText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (cleanText.startsWith('```')) {
      cleanText = cleanText.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }
    
    console.log('üìù Texto limpo:', cleanText);
    
    // Tentar parsear o JSON da resposta
    try {
      const parsedResponse = JSON.parse(cleanText);
      console.log('\n‚úÖ JSON parseado com sucesso!');
      console.log('üìã Resposta:', parsedResponse.answer);
      console.log('üí° Sugest√µes:', parsedResponse.suggestions);
      console.log('üéØ Confian√ßa:', parsedResponse.confidence + '%');
      console.log('üîó Fontes:', parsedResponse.sources);
    } catch (parseError) {
      console.log('\n‚ùå Erro ao parsear JSON:', parseError.message);
      console.log('üìÑ Usando texto limpo como resposta');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  }
}

testAIResponse();
