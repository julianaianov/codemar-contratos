import { GoogleGenerativeAI } from '@google/generative-ai';

// Configura√ß√£o do Gemini AI
// A API aceita tanto GEMINI_API_KEY quanto GOOGLE_API_KEY
const API_KEY = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY || 'AIzaSyCeHSGln21RVy5nmT-hTFUlgZfXucwZ-r8';
let genAI: GoogleGenerativeAI | null = null;
let model: any = null;

// Inicializar Gemini AI
try {
  if (API_KEY && API_KEY !== '' && API_KEY !== 'your-api-key-here') {
    genAI = new GoogleGenerativeAI(API_KEY);
    // Usar o modelo mais recente dispon√≠vel
    model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });
    console.log('‚úÖ Gemini AI inicializado com sucesso');
    console.log('üîë Chave configurada:', API_KEY.substring(0, 10) + '...');
  } else {
    console.warn('‚ö†Ô∏è Chave da API do Gemini n√£o configurada');
    console.log('üí° Configure GEMINI_API_KEY ou GOOGLE_API_KEY no arquivo .env.local');
  }
} catch (error) {
  console.error('‚ùå Erro ao inicializar Gemini AI:', error);
}

export interface SearchResult {
  query: string;
  answer: string;
  suggestions: string[];
  confidence: number;
  sources?: string[];
}

export interface ContractData {
  id: string;
  nome: string;
  descricao: string;
  valor: number;
  dataInicio: string;
  dataFim: string;
  fornecedor: string;
  diretoria: string;
  status: string;
  tipo: string;
}

export class GeminiAIService {
  /**
   * Busca inteligente de contratos usando IA
   */
  static async searchContracts(query: string, contracts: ContractData[]): Promise<SearchResult> {
    // Se o modelo n√£o estiver dispon√≠vel, usar fallback
    if (!model) {
      console.log('üîÑ Usando fallback - modelo Gemini n√£o dispon√≠vel');
      return this.fallbackSearch(query, contracts);
    }

    try {
      console.log('ü§ñ Enviando consulta para Gemini AI:', query);
      const contractsContext = this.formatContractsForAI(contracts);
      
      const prompt = `
Voc√™ √© um assistente especializado em an√°lise de contratos p√∫blicos da CODEMAR. 
Analise os dados de contratos fornecidos e responda √† consulta do usu√°rio de forma precisa e √∫til.

DADOS DOS CONTRATOS:
${contractsContext}

CONSULTA DO USU√ÅRIO: "${query}"

INSTRU√á√ïES:
1. Analise os dados de contratos fornecidos
2. Responda √† consulta de forma clara e precisa
3. Para perguntas sobre quantidade/n√∫mero total de contratos, use o n√∫mero exato de registros fornecidos
4. Forne√ßa informa√ß√µes espec√≠ficas quando poss√≠vel (valores, datas, fornecedores)
5. Se n√£o encontrar informa√ß√µes exatas, indique isso claramente
6. Sugira consultas relacionadas que podem ser √∫teis
7. Avalie sua confian√ßa na resposta (0-100%)

FORMATO DA RESPOSTA (JSON):
{
  "answer": "Resposta detalhada √† consulta",
  "suggestions": ["Sugest√£o 1", "Sugest√£o 2", "Sugest√£o 3"],
  "confidence": 85,
  "sources": ["ID do contrato relevante 1", "ID do contrato relevante 2"]
}

IMPORTANTE: Responda APENAS com o JSON v√°lido, sem markdown, sem \`\`\`json, sem texto adicional. Apenas o objeto JSON puro.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('üìù Resposta do Gemini:', text);
      
      // Limpar o texto da resposta (remover markdown se presente)
      let cleanText = text.trim();
      
      // Remover markdown code blocks se presente
      if (cleanText.startsWith('```json')) {
        cleanText = cleanText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (cleanText.startsWith('```')) {
        cleanText = cleanText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      // Tentar parsear o JSON da resposta
      try {
        const parsedResponse = JSON.parse(cleanText);
        console.log('‚úÖ Resposta parseada com sucesso');
        return {
          query,
          answer: parsedResponse.answer || 'N√£o foi poss√≠vel processar a consulta.',
          suggestions: parsedResponse.suggestions || [],
          confidence: parsedResponse.confidence || 0,
          sources: parsedResponse.sources || []
        };
      } catch (parseError) {
        console.log('‚ö†Ô∏è Erro ao parsear JSON, usando resposta em texto simples');
        console.log('Texto original:', text);
        console.log('Texto limpo:', cleanText);
        console.log('Erro de parse:', parseError.message);
        
        // Se n√£o conseguir parsear JSON, retornar resposta em texto simples
        return {
          query,
          answer: cleanText || text,
          suggestions: [
            'Buscar contratos por valor',
            'Filtrar por diretoria',
            'Consultar fornecedores espec√≠ficos'
          ],
          confidence: 70,
          sources: []
        };
      }
    } catch (error) {
      console.error('‚ùå Erro na busca com Gemini AI:', error);
      return this.fallbackSearch(query, contracts);
    }
  }

  /**
   * Fallback quando a API do Gemini n√£o est√° dispon√≠vel
   */
  private static fallbackSearch(query: string, contracts: ContractData[]): SearchResult {
    const queryLower = query.toLowerCase();
    
    // Se n√£o h√° contratos, retornar mensagem informativa
    if (contracts.length === 0) {
      return {
        query,
        answer: 'Nenhum contrato encontrado no sistema. Verifique se h√° dados importados.',
        suggestions: [
          'Importar contratos',
          'Verificar conex√£o com banco de dados',
          'Contatar administrador'
        ],
        confidence: 100,
        sources: []
      };
    }
    
    // An√°lise simples baseada em palavras-chave
    
    // Contagem total de contratos
    if (queryLower.includes('numero') || queryLower.includes('quantidade') || queryLower.includes('quantos') || 
        (queryLower.includes('total') && (queryLower.includes('contrato') || queryLower.includes('contratos')))) {
      return {
        query,
        answer: `O sistema possui ${contracts.length} contratos cadastrados.`,
        suggestions: [
          'Ver contratos por valor',
          'Filtrar por diretoria',
          'Consultar fornecedores',
          'Analisar por tipo de contrato'
        ],
        confidence: 100,
        sources: []
      };
    }
    
    if (queryLower.includes('maior') || queryLower.includes('valor')) {
      const sortedContracts = contracts.sort((a, b) => b.valor - a.valor);
      const topContract = sortedContracts[0];
      
      return {
        query,
        answer: `O maior contrato por valor √© "${topContract.nome}" com valor de R$ ${topContract.valor.toLocaleString('pt-BR')}, fornecido por ${topContract.fornecedor} para a diretoria ${topContract.diretoria}.`,
        suggestions: [
          'Ver todos os contratos por valor',
          'Filtrar por diretoria',
          'Consultar fornecedores'
        ],
        confidence: 90,
        sources: [topContract.id]
      };
    }
    
    if (queryLower.includes('fornecedor')) {
      const fornecedores = Array.from(new Set(contracts.map(c => c.fornecedor)));
      return {
        query,
        answer: `Encontrei ${fornecedores.length} fornecedores √∫nicos nos contratos: ${fornecedores.slice(0, 5).join(', ')}${fornecedores.length > 5 ? ' e outros.' : '.'}`,
        suggestions: [
          'Ver contratos por fornecedor',
          'Analisar valores por fornecedor',
          'Consultar fornecedores espec√≠ficos'
        ],
        confidence: 85,
        sources: []
      };
    }
    
    if (queryLower.includes('diretoria')) {
      const diretorias = Array.from(new Set(contracts.map(c => c.diretoria)));
      return {
        query,
        answer: `As diretorias com contratos s√£o: ${diretorias.join(', ')}.`,
        suggestions: [
          'Ver contratos por diretoria',
          'Analisar gastos por diretoria',
          'Consultar diretoria espec√≠fica'
        ],
        confidence: 85,
        sources: []
      };
    }
    
    if ((queryLower.includes('total') || queryLower.includes('soma')) && (queryLower.includes('valor') || queryLower.includes('financeiro'))) {
      const total = contracts.reduce((sum, c) => sum + c.valor, 0);
      return {
        query,
        answer: `O valor total dos contratos √© R$ ${total.toLocaleString('pt-BR')}, distribu√≠do em ${contracts.length} contratos.`,
        suggestions: [
          'Ver distribui√ß√£o por diretoria',
          'Analisar por tipo de contrato',
          'Consultar contratos ativos'
        ],
        confidence: 90,
        sources: []
      };
    }
    
    // Resposta gen√©rica
    return {
      query,
      answer: `Encontrei ${contracts.length} contratos dispon√≠veis. Posso ajud√°-lo a analisar valores, fornecedores, diretorias ou tipos de contrato. Que informa√ß√£o espec√≠fica voc√™ gostaria de saber?`,
      suggestions: [
        'Quais s√£o os maiores contratos por valor?',
        'Quais fornecedores t√™m mais contratos?',
        'Qual o valor total dos contratos?',
        'Quais diretorias t√™m mais gastos?'
      ],
      confidence: 70,
      sources: []
    };
  }

  /**
   * An√°lise de tend√™ncias nos contratos
   */
  static async analyzeTrends(contracts: ContractData[]): Promise<SearchResult> {
    const query = 'Analise as tend√™ncias e padr√µes nos contratos da CODEMAR';
    return this.searchContracts(query, contracts);
  }

  /**
   * Sugest√µes de consultas baseadas nos dados
   */
  static async generateQuerySuggestions(contracts: ContractData[]): Promise<string[]> {
    try {
      const contractsContext = this.formatContractsForAI(contracts.slice(0, 10)); // Usar apenas uma amostra
      
      const prompt = `
Com base nos dados de contratos fornecidos, sugira 5 consultas √∫teis que um usu√°rio poderia fazer:

DADOS DOS CONTRATOS:
${contractsContext}

Sugira consultas que sejam:
- Espec√≠ficas e acion√°veis
- √öteis para an√°lise de contratos
- Baseadas nos dados reais dispon√≠veis
- Em portugu√™s brasileiro

FORMATO: Retorne apenas uma lista JSON de strings:
["Consulta 1", "Consulta 2", "Consulta 3", "Consulta 4", "Consulta 5"]
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      try {
        return JSON.parse(text);
      } catch {
        return [
          'Quais s√£o os maiores contratos por valor?',
          'Quais fornecedores t√™m mais contratos?',
          'Qual diretoria tem mais gastos?',
          'Quais contratos est√£o pr√≥ximos do vencimento?',
          'Qual o valor total dos contratos ativos?'
        ];
      }
    } catch (error) {
      console.error('Erro ao gerar sugest√µes:', error);
      return [
        'Buscar contratos por valor',
        'Filtrar por diretoria',
        'Consultar fornecedores',
        'Analisar tend√™ncias',
        'Verificar vencimentos'
      ];
    }
  }

  /**
   * Formatar dados de contratos para o contexto da IA
   */
  private static formatContractsForAI(contracts: ContractData[]): string {
    return contracts.map(contract => `
ID: ${contract.id}
Nome: ${contract.nome}
Descri√ß√£o: ${contract.descricao}
Valor: R$ ${contract.valor.toLocaleString('pt-BR')}
Per√≠odo: ${contract.dataInicio} a ${contract.dataFim}
Fornecedor: ${contract.fornecedor}
Diretoria: ${contract.diretoria}
Status: ${contract.status}
Tipo: ${contract.tipo}
---`).join('\n');
  }

  /**
   * Busca sem√¢ntica em minutas
   */
  static async searchMinutas(query: string, minutas: any[]): Promise<SearchResult> {
    // Se o modelo n√£o estiver dispon√≠vel, usar fallback
    if (!model) {
      return this.fallbackSearchMinutas(query, minutas);
    }

    try {
      const minutasContext = minutas.map(minuta => `
ID: ${minuta.id}
Nome: ${minuta.nome}
Descri√ß√£o: ${minuta.descricao}
Tipo: ${minuta.tipo}
Data: ${minuta.dataUpload}
---`).join('\n');

      const prompt = `
Voc√™ √© um assistente especializado em an√°lise de minutas de contratos da CODEMAR.
Analise as minutas dispon√≠veis e responda √† consulta do usu√°rio.

MINUTAS DISPON√çVEIS:
${minutasContext}

CONSULTA: "${query}"

Responda de forma √∫til sobre as minutas dispon√≠veis, sugerindo qual seria mais adequada para a necessidade do usu√°rio.

FORMATO (JSON):
{
  "answer": "Resposta sobre as minutas",
  "suggestions": ["Sugest√£o 1", "Sugest√£o 2"],
  "confidence": 80,
  "sources": ["ID da minuta recomendada"]
}

IMPORTANTE: Responda APENAS com o JSON v√°lido, sem markdown, sem \`\`\`json, sem texto adicional. Apenas o objeto JSON puro.
`;

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Limpar o texto da resposta (remover markdown se presente)
      let cleanText = text.trim();
      
      // Remover markdown code blocks se presente
      if (cleanText.startsWith('```json')) {
        cleanText = cleanText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (cleanText.startsWith('```')) {
        cleanText = cleanText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      try {
        const parsedResponse = JSON.parse(cleanText);
        return {
          query,
          answer: parsedResponse.answer || 'N√£o foi poss√≠vel analisar as minutas.',
          suggestions: parsedResponse.suggestions || [],
          confidence: parsedResponse.confidence || 0,
          sources: parsedResponse.sources || []
        };
      } catch (parseError) {
        console.log('‚ö†Ô∏è Erro ao parsear JSON de minutas, usando resposta em texto simples');
        return {
          query,
          answer: cleanText || text,
          suggestions: ['Verificar minutas por tipo', 'Consultar descri√ß√µes detalhadas'],
          confidence: 70,
          sources: []
        };
      }
    } catch (error) {
      console.error('Erro na busca de minutas:', error);
      return this.fallbackSearchMinutas(query, minutas);
    }
  }

  /**
   * Fallback para busca de minutas
   */
  private static fallbackSearchMinutas(query: string, minutas: any[]): SearchResult {
    const queryLower = query.toLowerCase();
    
    // Se n√£o h√° minutas, retornar mensagem informativa
    if (minutas.length === 0) {
      return {
        query,
        answer: 'Nenhuma minuta encontrada no sistema. Fa√ßa upload de minutas para poder fazer consultas.',
        suggestions: [
          'Fazer upload de minutas',
          'Verificar se h√° arquivos na pasta de minutas',
          'Contatar administrador do sistema'
        ],
        confidence: 100,
        sources: []
      };
    }
    
    if (queryLower.includes('coopera√ß√£o') || queryLower.includes('cooperacao')) {
      const minutaCoop = minutas.find(m => 
        m.nome.toLowerCase().includes('coopera√ß√£o') || 
        m.nome.toLowerCase().includes('cooperacao') ||
        m.descricao.toLowerCase().includes('coopera√ß√£o') ||
        m.descricao.toLowerCase().includes('cooperacao')
      );
      
      if (minutaCoop) {
        return {
          query,
          answer: `Para acordo de coopera√ß√£o, recomendo a minuta "${minutaCoop.nome}". ${minutaCoop.descricao}`,
          suggestions: [
            'Ver detalhes da minuta',
            'Consultar outras minutas',
            'Verificar tipos dispon√≠veis'
          ],
          confidence: 95,
          sources: [minutaCoop.id]
        };
      }
    }
    
    if (queryLower.includes('fornecimento')) {
      const minutaFornec = minutas.find(m => 
        m.nome.toLowerCase().includes('fornecimento') ||
        m.descricao.toLowerCase().includes('fornecimento')
      );
      
      if (minutaFornec) {
        return {
          query,
          answer: `Para contratos de fornecimento, recomendo a minuta "${minutaFornec.nome}". ${minutaFornec.descricao}`,
          suggestions: [
            'Ver detalhes da minuta',
            'Consultar outras minutas',
            'Verificar tipos dispon√≠veis'
          ],
          confidence: 95,
          sources: [minutaFornec.id]
        };
      }
    }
    
    // Resposta gen√©rica
    return {
      query,
      answer: `Encontrei ${minutas.length} minutas dispon√≠veis: ${minutas.map(m => m.nome).join(', ')}. Qual tipo de contrato voc√™ precisa? Posso ajud√°-lo a encontrar a minuta mais adequada.`,
      suggestions: [
        'Ver todas as minutas',
        'Filtrar por tipo',
        'Consultar descri√ß√µes detalhadas'
      ],
      confidence: 80,
      sources: minutas.map(m => m.id)
    };
  }
}

